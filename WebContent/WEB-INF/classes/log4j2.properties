#
# (c) Copyright 2020 SailPoint Technologies, Inc., All Rights Reserved.
#
#       See https://logging.apache.org/log4j/2.x/manual/configuration.html
#       for description of the new syntax.
#

######################################
## Global log4j2 properties
######################################
name=ets_cloud_queue_default
status=warn
monitorInterval=20
#packages=

#######################################
## Appenders
#######################################

### direct log messages to stdout ###
appender.stdout.type=Console
appender.stdout.name=STDOUT
appender.stdout.target=SYSTEM_OUT
appender.stdout.layout.type=PatternLayout
appender.stdout.layout.pattern=%d{ISO8601} %5p %t %c{4}:%L - %m%n

# Below is an example of how to create a logger that writes to a file.
# Uncomment the following five lines, then uncomment the
# rootLogger.appenderRef.file.ref definition below
#appender.file.type=File
#appender.file.name=file
#appender.file.fileName=C:/Windows/Temp/cloudqueue.log
#appender.file.layout.type=PatternLayout
#appender.file.layout.pattern=%d{ISO8601} %5p %t %c{4}:%L - %m%n

#
# SailPoint metering is useful to help diagnose performance issues.
# Some critical sections of code will gather performance data
# metrics, and will log the data to the meter appender.
#
# Below is an example of how to create a csv of metered data.
# Uncomment the following 11 lines, as well as the logger.apiMeter lines
# near the end of this file
#
#appender.meter.type=RollingFile
#appender.meter.name=meter
#appender.meter.fileName=/var/log/cloudqueue/ets.log
#appender.meter.filePattern=/var/log/cloudqueue/ets-%d{yyyy-MM-dd}-%i.log.gz"
#appender.meter.layout.type=PatternLayout
#appender.meter.layout.pattern=%d{ISO8601} %5p %t %c{4}:%L - %m%n
#appender.meter.policies.type=Policies
#appender.meter.policies.size.type=SizeBasedTriggeringPolicy
#appender.meter.policies.size.size=10MB
#appender.meter.strategy.type=DefaultRolloverStrategy
#appender.meter.strategy.max=5

#######################################
## rootLogger
#######################################

### set default log levels and appenderRef
### valid log levels in increasing order of severity are:
###     trace, debug, info, warn, error, fatal, off
### trace is required to get method entry and exit logging

rootLogger.level=warn
rootLogger.appenderRef.stdout.ref=STDOUT

logger.rest_endpoints.name=sailpoint.ets.cloud.queue.rest
logger.rest_endpoints.level=trace

logger.queue_api.name=sailpoint.ets.cloud.queue.api
logger.queue_api.level=trace

logger.queue_tools.name=sailpoint.ets.cloud.queue.tools
logger.queue_tools.level=trace